"""
Andela Pair Programming Application
Written By Kevin Oyowe
October 21, 2016
----------------
This Application was developed as part of the Andela Bootcamp.
Being completely new to flask and python programming, I tried to apply most concepts
on the fly.
----------
Quote: 'It is just a matter of learning, you can do more if you properly learn'
		- Queen Elizabeth 
"""

# Import Required Libraries
from flask import Flask, render_template, json, request, redirect, session, flash
from flaskext.mysql import MySQL
from werkzeug import generate_password_hash, check_password_hash
import sqlite3
from flask import g
import time

# Instantiate app
app = Flask(__name__)
app.secret_key = '1st,who.hell.are.you?'
mysql = MySQL()

# MySQL configurations
# I started off with MySQL and later found it hard to change to Sqlite a long the way
# Sqlite would be better since this app will be hosted on heroku for demo purposes
# Am well conversant with MySQL server so I decided to use it for the Quickstart
#
# Then the database hosting issue arises, here is my configuration while running on my localhost
app.config['MYSQL_DATABASE_USER'] = 'root'
app.config['MYSQL_DATABASE_PASSWORD'] = 'root'
app.config['MYSQL_DATABASE_DB'] = 'pair_prog'
app.config['MYSQL_DATABASE_HOST'] = 'localhost'
mysql.init_app(app)
#
# And following is my configuration for online hosting for the purposes of demonstration. I didn't have a 
# choice but to use their autogenerated db consts
# app.config['MYSQL_DATABASE_USER'] = 'sql9140952'
# app.config['MYSQL_DATABASE_PASSWORD'] = 'D3T4qiGAvS'
# app.config['MYSQL_DATABASE_DB'] = 'sql9140952'
# app.config['MYSQL_DATABASE_HOST'] = 'sql9.freemysqlhosting.net'
# mysql.init_app(app)

# the following routes are used to show or render pages
@app.route('/')
def main():
	# landing index page before login
	return render_template('index.html')

@app.route('/showSignUp')
def showSignUp():
	# renders the signup page if the
	# user is not yet logged in
	if is_authorized():
		return render_template('userHome.html')
	else:
		return render_template('signup.html')

@app.route('/showSignIn')
def showSignIn():
	# displays the signin page if the user
	# is not yet signed in
	if is_authorized():
		return render_template('userHome.html')
	else:
		return render_template('signin.html')

@app.route('/showAddSession')
def showSession():
	# displays the add session page for adding
	# a new pair programming session
	if is_authorized():
		return render_template('addSession.html')
	else:
		return render_template('signin.html')

@app.route('/showEditSession/<int:sid>')
def showEditSession(sid):
	# displays the edit session page for editing
	# an existing pair programming session
	session['programmingSessionId'] = sid
	if is_authorized():
		return render_template('editSession.html', programmingSession = getProgrammingSession(sid))
	else:
		return render_template('signin.html')

@app.route('/showInviteToSession/<int:sid>')
def showInviteToSession(sid):
	# displays the invitation page
	session['programmingSessionId'] = sid
	if is_authorized():
		return render_template('inviteToSession.html', programmingSession = getProgrammingSession(sid), users = getUsers())
	else:
		return render_template('signin.html')

@app.route('/showCode/<int:sid>')
def showCode(sid):
	# loads the code editor containing the firepad
	# modules that enables one or more programmers
	# to work together
	if is_authorized():
		return render_template('codeEditor.html', programmingSession = getProgrammingSession(sid))
	else:
		return render_template('signin.html')

@app.route('/addSession', methods=['POST'])
def addSession():
	# handles the form that that is used to create
	# new programming sessions
	_name = request.form['inputSessionName']
	_language = request.form['inputSessionLanguage']
	_description = request.form['inputSessionDescription']
	_user_id = session['user_id']
	_date = time.strftime('%Y-%m-%d %H:%M:%S')

	if _name and _language and _description:
		cnn = mysql.connect()
		cursor = cnn.cursor()
		cursor.execute('INSERT INTO tbl_sessions (session_name, session_language, session_description, session_user_id, session_date) VALUES (%s, %s, %s, %s, %s)',
			[_name, _language, _description, _user_id, _date])
		cnn.commit()
		flash('Created session '+_name)
		return redirect('/userHome')
	else:
		return render_template('addSession.html', error = 'Please enter all input fields')

@app.route('/createInvite', methods=['POST'])
def createInvite():
	# handles the form that is used to invite collaborator
	_programmingSessionId = request.form['inputSessionId']
	_invited_by = session['user_id']
	_invited_user = request.form['inputInvitedUser']

	if _programmingSessionId and _invited_by and _invited_user:
		cnn = mysql.connect()
		cursor = cnn.cursor()
		cursor.execute('INSERT INTO tbl_invites(session_id, invited_by, invited_user) VALUES(%s, %s, %s)',
			[_programmingSessionId, _invited_by, _invited_user])
		cnn.commit()
		flash('Invite sent')
		return redirect('/userHome')
	else:
		return render_template('inviteToSession.html', error = 'Please enter all inputs prints')

@app.route('/updateSession/<int:sid>', methods=['POST'])
def updateSession(sid):
	# handles the form that is used to update
	# existing programming sessions
	_name = request.form['inputSessionName']
	_language = request.form['inputSessionLanguage']
	_description = request.form['inputSessionDescription']
	sid = sid

	cnn = mysql.connect()
	cursor = cnn.cursor()
	if _name and _language and _description:
		cursor.execute("""UPDATE tbl_sessions
			SET
			session_name = %s,
			session_description = %s,
			session_language = %s
			WHERE session_id = %s""", (_name, _description, _language, sid))
		cnn.commit()
		flash('Updated session '+_name)
		return redirect('/userHome')
	else:
		return render_template('editSession.html', error = 'Please enter all input fields')

@app.route('/deleteSession/<int:sid>')
def deleteSession(sid):
	# deletes a session with a given session id 
	# from the database
	cnn = mysql.connect()
	cursor = cnn.cursor()
	cursor.execute("DELETE FROM tbl_sessions WHERE session_id = {sid}".format(sid=sid))
	cnn.commit()
	flash('Session was deleted')
	return redirect('/userHome')

@app.route('/logout')
def logout():
	# logs out a user by removing the session variables.
	# I used to do this in php a lot :))
	session.pop('user_id', None)
	session.pop('user_name', None)
	return redirect('/')

@app.route('/userHome')
def userHome():
	# displays the home landing page after the user has
	# logged in.
	if is_authorized():
		return render_template('userHome.html', programmingSessions = getUserProgrammingSessions())
	else:
		return render_template('index.html', error='Please signin To continue')

@app.route('/showInvites')
def userInvites():
	# displays in the home page, sessions where 
	# the logged in user has been invited to pair
	if is_authorized():
		return render_template('userHome.html', invitedSessions = getInvitedSessions())
	else:
		return render_template('index.html', error='Please signin To continue')

def is_authorized():
	# checks if a user if authorized
	# :)) sounds silly to me, but its working fine right now, 
	# there must be a better way, will found later
	if session.get('user_id'):
		return True
	else:
		return False

def getUserProgrammingSessions():
	# returns all the programming sessions that
	# belong to a particular user
	_user_id = session['user_id']
	cnn = mysql.connect()
	cursor = cnn.cursor()
	cursor.execute("SELECT ts.session_id, "
		+"ts.session_name, "
		+"ts.session_description, "
		+"ts.session_user_id, "
		+"DATE_FORMAT(ts.session_date, '%b %d %Y %h:%i %p'), "
		+"ts.session_language, "
		+"tu.user_id FROM tbl_sessions ts join tbl_user tu "
		+"WHERE tu.user_id = ts.session_user_id AND tu.user_id= '{_user_id}'".format(_user_id=_user_id))
	data = cursor.fetchall()
	return data

def getProgrammingSession(session_id):
	# gets a programming session with a given session id
	cnn = mysql.connect()
	cursor = cnn.cursor()
	cursor.execute("SELECT * "
		+"FROM tbl_sessions "
		+"WHERE session_id= {session_id}".format(session_id=session_id))
	data = cursor.fetchall()
	return data

def getInvitedSessions():
	# returns all programming sessions that the logged in user
	# has been invited to pair in
	_invited_user = session['user_id']
	cnn = mysql.connect()
	cursor = cnn.cursor()
	cursor.execute("SELECT ts.session_id, "
		+"ts.session_name, "
		+"ts.session_description, "
		+"ts.session_date, "
		+"ts.session_language, "
		+"tu.user_name "
		+"FROM tbl_invites ti "
		+"join tbl_sessions ts on ti.session_id = ts.session_id "
		+"join tbl_user  tu on ti.invited_by = tu.user_id "
		+"and ti.invited_user = {_invited_user}".format(_invited_user = _invited_user))
	data = cursor.fetchall()
	return data

def getUsers():
	# returns all users in the system
	cnn = mysql.connect()
	cursor = cnn.cursor()
	cursor.execute("SELECT * FROM tbl_user")
	data = cursor.fetchall()
	return data

@app.route('/signUp', methods=['POST'])
def signUp():
	# handles the form used to register a new user
	_name = request.form['inputName']
	_email = request.form['inputEmail']
	_password = request.form['inputPassword']
	_hashed_password = generate_password_hash(_password)
	# validate the received values
	if _name and _email and _password:
		cnn = mysql.connect()
		cursor = cnn.cursor()
		cursor.execute('INSERT INTO tbl_user (user_name, user_username, user_password) values (%s, %s, %s)',
			[_name, _email, _hashed_password])
		cnn.commit()
		flash('Great, now signin')
		return render_template('signin.html')
	else:
		return 'not yet fields'


@app.route('/validateLogin', methods=['POST'])
def validateLogin():
	# validates a user who is attempting to login
	_username = request.form['inputEmail']
	_password = request.form['inputPassword']

	cnn = mysql.connect()
	cursor = cnn.cursor()
	cursor.execute("SELECT * FROM tbl_user WHERE user_username = '{_username}'".format(_username=_username))

	data = cursor.fetchall()
	if len(data) > 0:
		if check_password_hash(str(data[0][3]), str(_password)):
			session['user_id'] = data[0][0]
			session['user_name'] = data[0][1]
			flash('Welcome, '+data[0][1]+'.')
			return redirect('/userHome')
		else:
			return render_template('signin.html', error = 'Incorrect password, try again')
	else:
		return render_template('signin.html', error = 'Sorry, we did not recognize that user')

if __name__ == '__main__':
	app.run(debug=True, host='0.0.0.0')